1.嵌套类是指被定义在另一个类的内部的类。嵌套类存在的目的应该只是为它的外部类提供服务。嵌套类有四种：
    （1）静态成员类；
    （2）非静态成员类；
    （3）匿名类；
    （4）局部类；
    除了静态成员类以外，其余三种都称为内部类。

        静态成员类是最简单的一种嵌套类，最好把它看成是普通的类，只是碰巧被声明在另一个类的内部而已，它可以访问外部类的所有成员，包括那些声明
    为私有的成员。静态成员类是外围类的一个静态成员，与其他静态的成员一样，也遵守同样的可访问行规则。如果它被声明为私有的，它就只能在外围类的
    内部才可以被访问。

        非静态成员类与静态成员类的语法区别上就是静态成员类的声明中包括修饰符static。非静态成员类的每一个实例都隐含着与外围类的一个外围实例相关联。
    在非静态成员类的实例方法内部，可以调用外围实例上的方法，或者利用修饰过的this构造器获得外围实例的引用。如果嵌套类的实例可以再它外围类的实例
    之外独立存在，这个嵌套类就必须是静态成员类：在没有外围实例的情况下，要想创建非静态成员类的实例是不可能的。当非静态成员类的实例被创建的时候，
    它和外围实例的关联关系也随之被建立起来，并且以后不能被修改。

2.总体来说设计模式分为三大类：
    （1）创建型模式：
        工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式；
    （2）结构型模式：
        适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式；
    （3）行为型模式：
        策略模式，模板方法模式，观察者模式，迭代器模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式；

3.设计模式的六大原则
    （1）开闭原则：开闭原则对拓展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。为了使程序的扩展性好，易于维护与升级。想要达到这样的效果，需要使用接口和抽象类。
    （2）里氏替换原则：为面向对象设计的基本原则之一。任何基类可以出现的地方，子类也一定可以出现。里氏替换原则是对实现抽象化的具体步骤规范。
    （3）依赖倒置原则：这是开闭原则的基础，是对接口编程，依赖于抽象而不是具体；
    （4）接口隔离原则：使用多个隔离的接口，比使用单个接口要好。这是一个降低类之间耦合性的方法。
    （5）迪米特法则：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。
    （6）合成复用原则：原则是尽量使用组成/聚合的方式，而不是使用继承；
